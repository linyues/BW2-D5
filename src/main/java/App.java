import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here

        List<Item> items=itemRepository.findAll();
        HashMap<Item,Integer> menu=new HashMap<>();

        for(int i=0;i<inputs.size();i++){
            String[] temp=inputs.get(i).split(" ");
            for(int j=0;j<items.size();j++){
                if(temp[0].equals(items.get(j).getId())){
                    Item item=items.get(j);
                    if(menu.get(item)==null){
                        menu.put(item,Integer.parseInt(temp[2]));
                    }else {
                        Integer itemNum=menu.get(item);
                        menu.put(item,Integer.parseInt(temp[2])+itemNum);
                    }
                }
            }
        }

        List<Map.Entry<Item, Integer>> sortmenu = new ArrayList<>(menu.entrySet());

        Collections.sort(sortmenu, new Comparator<Map.Entry<Item, Integer>>() {
            public int compare(Map.Entry<Item, Integer> o1,
                               Map.Entry<Item, Integer> o2) {
                return new Double( (o2.getValue()*o2.getKey().getPrice())-(o1.getValue()*o1.getKey().getPrice())).intValue();
            }
        });

        Result result1=halfPrice(sortmenu);
        Result result2=cutPrice(result1.getTotalPrice()+result1.getCutPrice());

        if(result1.getTotalPrice()<=result2.getTotalPrice()){

            if(result1.getCutPrice()==0.0){
                result1.getResultString().append("Total："+result1.getTotalPrice().intValue()+" yuan\n"+
                        "===================================");
            }else{
                result1.getResultString().append(result1.getFomalString());
                result1.getResultString().append("Total："+result1.getTotalPrice().intValue()+" yuan\n"+
                        "===================================");
            }
        }else{
            result1.getResultString().append(result2.getFomalString());
            result1.getResultString().append("Total："+result2.getTotalPrice().intValue()+" yuan\n"+
                    "===================================");
        }

        return String.valueOf(result1.getResultString());
    }

    public Result halfPrice(List<Map.Entry<Item, Integer>> menu){

        List<String> cutMeal=new ArrayList<>();
        List<SalesPromotion> salesPromotions=salesPromotionRepository.findAll();

        Double total=0.0;
        Double cut=0.0;
        Integer num=0;
        boolean isHalf=false;
        StringBuffer para1=new StringBuffer("============= Order details =============\n");
        for(Map.Entry s : menu){
            isHalf=false;
            Item item= (Item)s.getKey();
            num = (Integer) s.getValue();
            para1.append(item.getName()+" x " + num + " = " + ((Double)(num*item.getPrice())).intValue() + " yuan\n");
            if(!salesPromotions.get(1).getRelatedItems().isEmpty()){
                for(int i=0;i<salesPromotions.get(1).getRelatedItems().size();i++){
                    if(item.getId().equals(salesPromotions.get(1).getRelatedItems().get(i))){
                        isHalf=true;
                        cutMeal.add(item.getName());
                    }
                }
            }
            if(isHalf){
                total += (item.getPrice()/2)*num;
                cut += (item.getPrice()/2)*num;
            }
            else{
                total += (item.getPrice())*num;
            }
        }
        para1.append("-----------------------------------\n");
        StringBuffer para2=new StringBuffer();

        if(cut>=0.0){
            para2.append("Promotion used:\n");
            para2.append("Half price for certain dishes (");
            for(int i=0;i<cutMeal.size();i++){
                if(i!=cutMeal.size()-1){
                    para2.append(cutMeal.get(i)+"，");
                }else {
                    para2.append(cutMeal.get(i)+")，saving "+cut.intValue()+" yuan\n");
                    para2.append("-----------------------------------\n");
                }
            }
        }
        Result result = new Result(para1,para2,total,cut);
        return result;
    }

    public Result cutPrice(Double total){
        if(total >= 30){
            total -=6.0;
        }
        StringBuffer para1=new StringBuffer();
        StringBuffer para2=new StringBuffer(
                "Promotion used:\n" +
                        "满30减6 yuan，saving 6 yuan\n" +
                        "-----------------------------------\n");
        return new Result(para1,para2,total,0.0);
    }
}
